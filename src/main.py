"""
Service4CT - –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ò–ò-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–æ–º–æ–≥—Ä–∞—Ñ–∏–π –æ—Ä–≥–∞–Ω–æ–≤ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ DICOM —Ñ–∞–π–ª–∞—Ö.
"""

import argparse
from src.pipelines.infer_pipeline import run_inference
from src.pipelines.train_pipeline import run_training
from src.utils.logging_setup import setup_logging


def parse_args():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="Service4CT - –ò–ò-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–¢ –æ—Ä–≥–∞–Ω–æ–≤ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏")
    parser.add_argument("--mode", choices=["train", "infer"], default="infer", 
                       help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: train (–æ–±—É—á–µ–Ω–∏–µ) –∏–ª–∏ infer (–∏–Ω—Ñ–µ—Ä–µ–Ω—Å)")
    parser.add_argument("--input_dir", type=str, default="data/input_zips",
                       help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ ZIP –∞—Ä—Ö–∏–≤–∞–º–∏")
    parser.add_argument("--output_path", type=str, default="data/results/results.xlsx",
                       help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--config", type=str, default="configs/config.yaml",
                       help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    return parser.parse_args()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    args = parse_args()
    setup_logging("logs")
    
    if args.mode == "train":
        print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...")
        run_training(args.config)
    else:
        print("üîç –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞...")
        run_inference(args.input_dir, args.output_path, args.config)


if __name__ == "__main__":
    main()
