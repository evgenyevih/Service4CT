#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–¢ –æ—Ä–≥–∞–Ω–æ–≤ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏.
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.pipelines.infer_pipeline import run_inference
from src.models.cnn3d import CNN3DModel
from src.utils.config import load_yaml
import numpy as np


def example_basic_inference():
    """–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞"""
    print("üîç –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_yaml("configs/config.yaml")
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.get('project', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = CNN3DModel(
        checkpoint_path="weights/best_model.pth",
        device="cpu"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    )
    print("‚úÖ –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–ª—É—á–∞–π–Ω—ã–π 3D –º–∞—Å—Å–∏–≤)
    test_volume = np.random.rand(64, 64, 64).astype(np.float32)
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–º —Å–æ–∑–¥–∞–Ω: {test_volume.shape}")
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    probability = model.predict_probability(test_volume)
    print(f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—Ç–æ–ª–æ–≥–∏–∏: {probability:.3f}")
    print(f"üè• –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {'–ü–∞—Ç–æ–ª–æ–≥–∏—è' if probability > 0.5 else '–ù–æ—Ä–º–∞'}")


def example_config_usage():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("\n‚öôÔ∏è –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    print("=" * 50)
    
    config = load_yaml("configs/config.yaml")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    inference_config = config.get('inference', {})
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–∑–æ–≤: {inference_config.get('num_slices', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    print(f"–û–∫–Ω–æ HU: {inference_config.get('window', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    model_config = config.get('model', {})
    print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {model_config.get('backbone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {model_config.get('img_size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")


def example_directory_structure():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
    print("=" * 50)
    
    required_dirs = [
        "data/input_zips",
        "data/results", 
        "data/workdir",
        "data/training_data",
        "logs",
        "weights",
        "configs"
    ]
    
    for dir_path in required_dirs:
        if os.path.exists(dir_path):
            print(f"‚úÖ {dir_path}")
        else:
            print(f"‚ùå {dir_path} - —Å–æ–∑–¥–∞–µ–º...")
            os.makedirs(dir_path, exist_ok=True)
            print(f"‚úÖ {dir_path} - —Å–æ–∑–¥–∞–Ω–∞")


if __name__ == "__main__":
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Service4CT - –ò–ò-—Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –ö–¢")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        example_directory_structure()
        
        # –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        example_config_usage()
        
        # –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
        example_basic_inference()
        
        print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
